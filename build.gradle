plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.debug.verbose', 'true'
            property 'mixin.debug.export', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run')
            property 'mixin.env.ignoreRequired', 'true'
            args '--mod', 'survivorsdelight',
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/')
            mods {
                survivorsdelight {
                    source sourceSets.main
                }
            }
            /*
            property 'mixin.env.ignoreRequired', 'true'
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.remapRefMap', 'true'

            property 'forge.logging.markers', 'LOADING,SCAN,REGISTRIES,CORE,CLASSLOADING'
            property 'forge.logging.console.level', 'debug'
             */
        }

    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven { url "https://maven.blamejared.com" }
}

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    annotationProcessor "io.github.llamalad7:mixinextras-common:0.4.1"
    compileOnly       "io.github.llamalad7:mixinextras-common:0.4.1"
    implementation    "io.github.llamalad7:mixinextras-forge:0.4.1"
    jarJar            "io.github.llamalad7:mixinextras-forge:[0.4.1,)"

    implementation fg.deobf("curse.maven:terrafirmacraft-302973:6835820")
    implementation fg.deobf("curse.maven:patchouli-306770:4636277")
    implementation fg.deobf("curse.maven:farmers-delight-398521:6597298")
    implementation fg.deobf("curse.maven:survivors-abilities-1354890:7041518")
    compileOnly fg.deobf("curse.maven:firmalife-453394:6817407")
    compileOnly fg.deobf("curse.maven:jade-324717:6855440")

}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': "${mod_id}.mixins.json"
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jarJar.enable()
reobf {
    create("jarJar")
}
tasks.named('jar').configure { finalizedBy 'reobfJar' }
tasks.named('jarJar').configure { finalizedBy 'reobfJarJar' }

mixin{
    add sourceSets.main, "survivorsdelight.mixins.refmap.json";
    config "survivorsdelight.mixins.json";
    debug.verbose = true
    debug.export = true
}


