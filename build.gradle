plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.107'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    maven {
        url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven { url "https://maven.blamejared.com" }
}

base {
    archivesName = mod_id
}

// 1.21.1 → Java 21
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // 使用 gradle.properties 內的版本鍵
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // 可選：Access Transformer
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            // Mixin 偵錯（沿用你原始習慣）
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.debug.verbose', 'true'
            systemProperty 'mixin.debug.export', 'true'
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.debug.verbose', 'true'
            systemProperty 'mixin.debug.export', 'true'
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all',
                    '--output', file('src/generated/resources/').getAbsolutePath(),
                    '--existing', file('src/main/resources/').getAbsolutePath()

            // 有些帶 mixin 的專案跑 datagen 會卡 required
            systemProperty 'mixin.env.ignoreRequired', 'true'
            systemProperty 'mixin.env.remapRefMap', 'true'
            systemProperty 'mixin.debug.verbose', 'true'
            systemProperty 'mixin.debug.export', 'true'
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG

            gameDirectory = project.file('run')
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// 讓 datagen 產物併入主資源
sourceSets.main.resources { srcDir 'src/generated/resources' }

// 建立一個「可選的執行期」相依（不外發）
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {

    implementation "curse.maven:terrafirmacraft-302973:7035035"
    implementation "curse.maven:patchouli-306770:6842247"
    implementation "curse.maven:farmers-delight-398521:6917256"

    //compileOnly "curse.maven:firmalife-453394:6817407"
    compileOnly "curse.maven:jade-324717:6853386"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            neo_version             : neo_version,
            loader_version_range    : loader_version_range,
            mod_id                  : mod_id,
            mod_name                : mod_name,
            mod_license             : mod_license,
            mod_version             : mod_version,
            mod_authors             : mod_authors,
            mod_description         : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven { url "file://${project.projectDir}/repo" }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

